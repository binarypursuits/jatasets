{
    "project": {
        "name": "<json:package.json>",
        "description": "<json:package.json>",
        "version": "<json:package.json>",
        "url": "<json:package.json>"
    },
    "files": {
        "src\\List.js": {
            "name": "src\\List.js",
            "modules": {},
            "classes": {
                "List": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\dictionary.js": {
            "name": "src\\dictionary.js",
            "modules": {},
            "classes": {
                "Dictionary": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\hash.js": {
            "name": "src\\hash.js",
            "modules": {},
            "classes": {
                "hash": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\jataset.js": {
            "name": "src\\jataset.js",
            "modules": {},
            "classes": {
                "JataSet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\queue.js": {
            "name": "src\\queue.js",
            "modules": {},
            "classes": {
                "Queue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\stack.js": {
            "name": "src\\stack.js",
            "modules": {},
            "classes": {
                "Stack": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "List": {
            "name": "List",
            "shortname": "List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\List.js",
            "line": 1,
            "description": "Creates a new List Data object",
            "mainName": "jatasets",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "Dictionary": {
            "name": "Dictionary",
            "shortname": "Dictionary",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\dictionary.js",
            "line": 1,
            "description": "JavaScript data structure object use to store key, value\npairs, where as the key is used to store and retrieve a\nparticular element.",
            "mainName": "jatasets",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "hash": {
            "name": "hash",
            "shortname": "hash",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\hash.js",
            "line": 1,
            "description": "JavaScript hash this.table object use to store key, value\npairs, where as the key is hashed to store and retrieve a\nparticular element.",
            "mainName": "jatasets",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "JataSet": {
            "name": "JataSet",
            "shortname": "JataSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\jataset.js",
            "line": 1,
            "description": "JavaScript data structure object representing a collection of\nunordered, unique elements.  The data structure is similar to\nthe mathematical concept of finite sets, but instead applied\nas a JavaScript object.  A set should be viewed as an array\nwith no repeated elements and with no concept or order.\n\nThe purpose of the Set object is to provide developers a tool\nto manage both individual sets by adding and removing elements,\nbut a means to run comparison operations against two Set objects.",
            "mainName": "jatasets",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "Queue": {
            "name": "Queue",
            "shortname": "Queue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\queue.js",
            "line": 1,
            "description": "Creates a new Queue Data object",
            "mainName": "jatasets",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "Stack": {
            "name": "Stack",
            "shortname": "Stack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\stack.js",
            "line": 1,
            "description": "Creates a new Stack Data object",
            "mainName": "jatasets",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\List.js",
            "line": 10,
            "description": "Creates a new List Object",
            "is_constructor": 1,
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 16,
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 19,
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 22,
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 25,
            "description": "Private method to append an element to the list",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "element",
                    "description": "The element being appended to the list",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 41,
            "description": "Private method to find an element in the list.  Will either return\nelement index if found and false if not found.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "element",
                    "description": "The element being appended to the list",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 66,
            "description": "Method to reset list.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 80,
            "description": "Method to retrieve list as comma seperate string",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "list as comma serperate string",
                "type": "String"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 92,
            "description": "Method to retrieve list as JSON string",
            "memberof": "toJson",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 104,
            "description": "Method to add element to list",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "element",
                    "description": "The element you wish to place",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 124,
            "description": "Method to insert element after another element",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "element",
                    "description": "The element you wish to place",
                    "type": "Mixed"
                },
                {
                    "name": "after",
                    "description": "The element you wish to place after",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 147,
            "description": "Method to remove element from list",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "element",
                    "description": "The element to be removed",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 170,
            "description": "Method to move current position to the beginning of the list",
            "itemtype": "method",
            "name": "front",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 183,
            "description": "Method to move current position to the end of the list",
            "itemtype": "method",
            "name": "end",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 196,
            "description": "Method to move current position in list to previous element",
            "itemtype": "method",
            "name": "prev",
            "return": {
                "description": "",
                "type": "Integer|Boolean"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 214,
            "description": "Method to move current position in list to next element",
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": "",
                "type": "Integer|boolean"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 232,
            "description": "Method to get current number of elements in the list",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "number of elements in the list",
                "type": "Integer"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 244,
            "description": "Method to get current position in the list",
            "itemtype": "method",
            "name": "current",
            "return": {
                "description": "current possition in th elist",
                "type": "Integer"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 256,
            "description": "Method to move current position in the list to specific position\nand validating the position provided",
            "itemtype": "method",
            "name": "move",
            "params": [
                {
                    "name": "position",
                    "description": "- The position to move to in the list",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 277,
            "description": "Method to get element at current position in the list",
            "itemtype": "method",
            "name": "getElement",
            "return": {
                "description": "element in the current position",
                "type": "Mixed"
            },
            "class": "List"
        },
        {
            "file": "src\\List.js",
            "line": 289,
            "description": "Method to determine if list contains an element",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "element",
                    "description": "- The element to verify if in list",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "src\\dictionary.js",
            "line": 12,
            "description": "Creates a new Dictionary",
            "is_constructor": 1,
            "class": "Dictionary"
        },
        {
            "file": "src\\dictionary.js",
            "line": 19,
            "class": "Dictionary"
        },
        {
            "file": "src\\dictionary.js",
            "line": 22,
            "class": "Dictionary"
        },
        {
            "file": "src\\dictionary.js",
            "line": 25,
            "description": "Method to get instance of last element put on stack",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "key",
                    "description": "index value to store value under",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "value",
                    "description": "item being stored",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Dictionary"
        },
        {
            "file": "src\\dictionary.js",
            "line": 47,
            "description": "Method to remove item from the dictionary",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "index of item to be removed",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Dictionary"
        },
        {
            "file": "src\\dictionary.js",
            "line": 68,
            "description": "Method to retrieve value from dictionary using the key",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "key",
                    "description": "index search for in dictionary",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "return item if successful and false if key is not valid",
                "type": "Mixed"
            },
            "class": "Dictionary"
        },
        {
            "file": "src\\dictionary.js",
            "line": 87,
            "description": "Method to get current number of items in dictionary",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "Dictionary"
        },
        {
            "file": "src\\dictionary.js",
            "line": 99,
            "description": "Method to clear all values from dictionary",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Dictionary"
        },
        {
            "file": "src\\dictionary.js",
            "line": 113,
            "description": "Method to array of indexes",
            "itemtype": "method",
            "name": "getIndexArray",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Dictionary"
        },
        {
            "file": "src\\hash.js",
            "line": 14,
            "description": "Method to get instance of last element put on stack",
            "itemtype": "method",
            "name": "ValuePair",
            "params": [
                {
                    "name": "key",
                    "description": "index value to hash",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "value",
                    "description": "item being stored",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "hash"
        },
        {
            "file": "src\\hash.js",
            "line": 34,
            "description": "Access point to hash object",
            "is_constructor": 1,
            "class": "hash"
        },
        {
            "file": "src\\hash.js",
            "line": 41,
            "class": "hash"
        },
        {
            "file": "src\\hash.js",
            "line": 44,
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "",
                "type": "Number/hash.djb2HashCode.hash.djb2HashCode.hash/Number.djb2HashCode.hash/key@call;charCodeAt.djb2HashCode.hash"
            },
            "class": "hash"
        },
        {
            "file": "src\\hash.js",
            "line": 54,
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "",
                "type": "hash.djb2HashCode.hash.djb2HashCode.hash/Number.djb2HashCode.hash/key@call;charCodeAt.djb2HashCode.hash/Number"
            },
            "class": "hash"
        },
        {
            "file": "src\\hash.js",
            "line": 72,
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Type"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "hash"
        },
        {
            "file": "src\\hash.js",
            "line": 98,
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "",
                "type": "hash.ValuePair.value/undefined.value"
            },
            "class": "hash"
        },
        {
            "file": "src\\hash.js",
            "line": 131,
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Type"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "hash"
        },
        {
            "file": "src\\hash.js",
            "line": 162,
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "hash"
        },
        {
            "file": "src\\jataset.js",
            "line": 18,
            "description": "Creates a new Set Object",
            "is_constructor": 1,
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 24,
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 27,
            "description": "Private utility method to determine if value exists in the set",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "exists",
            "params": [
                {
                    "name": "element",
                    "description": "The element being appended to the set",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 41,
            "description": "Method to add value to set",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "value",
                    "description": "value being added to the set",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 62,
            "description": "Method to remove value from set",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "value",
                    "description": "Value being removed from the set",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 82,
            "description": "Method to verify if a value is in the set",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "value",
                    "description": "value to test if exists in set",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 96,
            "description": "Method to clear all values from the set",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 109,
            "description": "Method to get current size of set",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "number of values in set",
                "type": "Integer"
            },
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 131,
            "description": "Method to retrieve all values in the set",
            "itemtype": "method",
            "name": "values",
            "return": {
                "description": "values from the set",
                "type": "Object"
            },
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 160,
            "description": "Method to retrieve all values in the set",
            "itemtype": "method",
            "name": "union",
            "return": {
                "description": "values from the set",
                "type": "Object"
            },
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 191,
            "description": "Method to retrieve all values in the set",
            "itemtype": "method",
            "name": "intersection",
            "return": {
                "description": "values from the set",
                "type": "Object"
            },
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 217,
            "description": "Method to retrieve all values in the set",
            "itemtype": "method",
            "name": "difference",
            "return": {
                "description": "values from the set",
                "type": "Object"
            },
            "class": "JataSet"
        },
        {
            "file": "src\\jataset.js",
            "line": 243,
            "description": "Method to retrieve all values in the set",
            "itemtype": "method",
            "name": "subset",
            "return": {
                "description": "values from the set",
                "type": "Object"
            },
            "class": "JataSet"
        },
        {
            "file": "src\\queue.js",
            "line": 10,
            "description": "Creates a new Queue",
            "is_constructor": 1,
            "class": "Queue"
        },
        {
            "file": "src\\queue.js",
            "line": 16,
            "class": "Queue"
        },
        {
            "file": "src\\queue.js",
            "line": 19,
            "class": "Queue"
        },
        {
            "file": "src\\queue.js",
            "line": 22,
            "class": "Queue"
        },
        {
            "file": "src\\queue.js",
            "line": 25,
            "description": "Method to Queue an element to the Queue",
            "itemtype": "method",
            "name": "enqueue",
            "params": [
                {
                    "name": "element",
                    "description": "being added to Queue",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Queue"
        },
        {
            "file": "src\\queue.js",
            "line": 48,
            "description": "Method to remove an element from the Queue",
            "itemtype": "method",
            "name": "dequeue",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Queue"
        },
        {
            "file": "src\\queue.js",
            "line": 66,
            "description": "Method to retrieve element in front of Queue",
            "itemtype": "method",
            "name": "front",
            "class": "Queue"
        },
        {
            "file": "src\\queue.js",
            "line": 83,
            "description": "Method to retrieve element in back of Queue",
            "itemtype": "method",
            "name": "back",
            "class": "Queue"
        },
        {
            "file": "src\\queue.js",
            "line": 94,
            "description": "Method to verify if Queue is empty",
            "itemtype": "method",
            "name": "empty",
            "class": "Queue"
        },
        {
            "file": "src\\queue.js",
            "line": 110,
            "description": "Method to retrieve Queue as string with line breaks",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Queue"
        },
        {
            "file": "src\\stack.js",
            "line": 10,
            "description": "Creates a new Stack Object",
            "is_constructor": 1,
            "class": "Stack"
        },
        {
            "file": "src\\stack.js",
            "line": 16,
            "class": "Stack"
        },
        {
            "file": "src\\stack.js",
            "line": 19,
            "class": "Stack"
        },
        {
            "file": "src\\stack.js",
            "line": 22,
            "description": "Method to reset stack.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Stack"
        },
        {
            "file": "src\\stack.js",
            "line": 35,
            "description": "Method to get instance of last element put on stack",
            "itemtype": "method",
            "name": "peek",
            "return": {
                "description": "last item placed on stack",
                "type": "Mixed"
            },
            "class": "Stack"
        },
        {
            "file": "src\\stack.js",
            "line": 52,
            "description": "Method to remove last element put on stack",
            "itemtype": "method",
            "name": "pop",
            "return": {
                "description": "removed item from top of stack",
                "type": "Mixed"
            },
            "class": "Stack"
        },
        {
            "file": "src\\stack.js",
            "line": 64,
            "description": "Method to push new element onto stack",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "element",
                    "description": "The element to push onto stack",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Stack"
        },
        {
            "file": "src\\stack.js",
            "line": 84,
            "description": "Method to get current number of elements in the stack",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "number of elements in the stack",
                "type": "Integer"
            },
            "class": "Stack"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: memberof",
            "line": " src\\List.js:92"
        },
        {
            "message": "Missing item type\nCreates a new List Object",
            "line": " src\\List.js:10"
        },
        {
            "message": "Missing item type",
            "line": " src\\List.js:16"
        },
        {
            "message": "Missing item type",
            "line": " src\\List.js:19"
        },
        {
            "message": "Missing item type",
            "line": " src\\List.js:22"
        },
        {
            "message": "Missing item type\nMethod to retrieve list as JSON string",
            "line": " src\\List.js:92"
        },
        {
            "message": "Missing item type\nCreates a new Dictionary",
            "line": " src\\dictionary.js:12"
        },
        {
            "message": "Missing item type",
            "line": " src\\dictionary.js:19"
        },
        {
            "message": "Missing item type",
            "line": " src\\dictionary.js:22"
        },
        {
            "message": "Missing item type\nAccess point to hash object",
            "line": " src\\hash.js:34"
        },
        {
            "message": "Missing item type",
            "line": " src\\hash.js:41"
        },
        {
            "message": "Missing item type",
            "line": " src\\hash.js:44"
        },
        {
            "message": "Missing item type",
            "line": " src\\hash.js:54"
        },
        {
            "message": "Missing item type",
            "line": " src\\hash.js:72"
        },
        {
            "message": "Missing item type",
            "line": " src\\hash.js:98"
        },
        {
            "message": "Missing item type",
            "line": " src\\hash.js:131"
        },
        {
            "message": "Missing item type",
            "line": " src\\hash.js:162"
        },
        {
            "message": "Missing item type\nCreates a new Set Object",
            "line": " src\\jataset.js:18"
        },
        {
            "message": "Missing item type",
            "line": " src\\jataset.js:24"
        },
        {
            "message": "Missing item type\nCreates a new Queue",
            "line": " src\\queue.js:10"
        },
        {
            "message": "Missing item type",
            "line": " src\\queue.js:16"
        },
        {
            "message": "Missing item type",
            "line": " src\\queue.js:19"
        },
        {
            "message": "Missing item type",
            "line": " src\\queue.js:22"
        },
        {
            "message": "Missing item type\nCreates a new Stack Object",
            "line": " src\\stack.js:10"
        },
        {
            "message": "Missing item type",
            "line": " src\\stack.js:16"
        },
        {
            "message": "Missing item type",
            "line": " src\\stack.js:19"
        }
    ]
}