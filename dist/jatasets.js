!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.jatasets=t():e.jatasets=t()}(window,function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=3)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.tree={}}return e.prototype.add=function(e){var t=this.tree,r=null,n=e.slice(0,1);for(e=e.slice(1);t[n]&&n;)(t=t[n]).remainder.push(e),n=e.slice(0,1),e=e.slice(1);for(;n;)r={remainder:[e]},t[n]=r,t=r,n=e.slice(0,1),e=e.slice(1)},e.prototype.search=function(e){var t=this.tree,r=e.slice(0,1);for(e=e.slice(1);t[r]&&r;)t=t[r],r=e.slice(0,1),e=e.slice(1);return r&&!t[r]?{remainder:[]}:t},e}();t.Trie=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.qKey={},this.items=new WeakMap,this.clear()}return e.prototype.add=function(e){if(!e)return!1;var t=this.items.get(this.qKey);return!!t&&(t.push(e),!0)},e.prototype.remove=function(){var e=this.items.get(this.qKey);return!(!e||0===this.size())&&e.shift()},e.prototype.peek=function(){var e=this.items.get(this.qKey);return e?e[e.length-1]:e},e.prototype.front=function(){var e=this.items.get(this.qKey);return!(!e||0===this.size())&&e[0]},e.prototype.back=function(){var e=this.items.get(this.qKey);return e?e[e.length-1]:e},e.prototype.clear=function(){this.items.set(this.qKey,[])},e.prototype.size=function(){var e=this.items.get(this.qKey);return e?e.length:0},e}();t.Queue=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.sKey={},this.items=new WeakMap,this.clear()}return e.prototype.push=function(e){var t=this.items.get(this.sKey);return!(!t||!e)&&(t.push(e),!0)},e.prototype.pop=function(){var e=this.items.get(this.sKey);return e?e.pop():e},e.prototype.peek=function(){if(0===this.size())return!1;var e=this.items.get(this.sKey);return!!e&&e[e.length-1]},e.prototype.clear=function(){return this.items.set(this.sKey,[]),!0},e.prototype.size=function(){var e=this.items.get(this.sKey);return e?e.length:0},e}();t.Stack=n,t.hello=function(){return"Hello World"}},function(e,t,r){"use strict";function n(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0}),n(r(2)),n(r(1)),n(r(0))}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,